package com.proyectofinal.backend.Services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Calendar;

@Service
public class ScheduledTasksService {

    private static final Logger logger = LoggerFactory.getLogger(ScheduledTasksService.class);
    
    // 游댠 CALENDARIFIC COMENTADO - DESCOMENTA SI QUIERES HABILITAR IMPORTACI칍N AUTOM츼TICA DE FESTIVOS 游댠
    // private final CalendarificService calendarificService;
    private final VacationService vacationService;
    
    public ScheduledTasksService(
            // CalendarificService calendarificService,  // 游댠 COMENTADO - Calendarific deshabilitado
            VacationService vacationService) {
        // this.calendarificService = calendarificService;  // 游댠 COMENTADO - Calendarific deshabilitado
        this.vacationService = vacationService;
        
        logger.info("游뛂 ScheduledTasksService: Calendarific deshabilitado - Importaci칩n autom치tica de festivos no disponible");
        logger.info("游눠 Las vacaciones autom치ticas seguir치n funcionando normalmente");
    }
    
    /**
     * Tarea programada para ejecutarse el 31 de diciembre a las 23:59 cada a침o.
     * Genera las vacaciones autom치ticas para el a침o siguiente.
     * NOTA: Importaci칩n de festivos est치 deshabilitada (requiere Calendarific API)
     */
    @Scheduled(cron = "0 59 23 31 12 *")
    public void yearEndProcessing() {
        LocalDateTime now = LocalDateTime.now(ZoneId.systemDefault());
        int nextYear = now.getYear() + 1;
        
        logger.info("Iniciando procesamiento de fin de a침o: " + now);
        
        try {
            // 游댠 COMENTADO - Calendarific deshabilitado
            // logger.info("Importando festivos nacionales para el a침o " + nextYear);
            // int holidaysImported = calendarificService.importNationalHolidays(nextYear);
            // logger.info("Se importaron " + holidaysImported + " festivos nacionales para el a침o " + nextYear);
            
            logger.info("游뛂 Importaci칩n de festivos omitida - Calendarific deshabilitado");
            logger.info("游눠 Los festivos pueden a침adirse manualmente desde la interfaz de administraci칩n");
            
            // Generar vacaciones autom치ticas para el pr칩ximo a침o
            logger.info("Generando vacaciones autom치ticas para el a침o " + nextYear);
            int vacationsAssigned = vacationService.assignVacationsForYear(nextYear);
            logger.info("Se asignaron vacaciones a " + vacationsAssigned + " empleados para el a침o " + nextYear);
            
            logger.info("Procesamiento de fin de a침o completado con 칠xito");
        } catch (Exception e) {
            logger.error("Error durante el procesamiento de fin de a침o", e);
        }
    }
    
    /**
     * M칠todo para forzar la ejecuci칩n del procesamiento de fin de a침o desde un endpoint
     * @param year El a침o para el que se realizar치 el procesamiento
     * @return Resumen de las operaciones realizadas
     */
    public String forceYearEndProcessing(int year) {
        logger.info("Forzando procesamiento para el a침o " + year);
        
        try {
            // 游댠 COMENTADO - Calendarific deshabilitado
            // Importar festivos nacionales
            // int holidaysImported = calendarificService.importNationalHolidays(year);
            int holidaysImported = 0; // Valor por defecto cuando Calendarific est치 deshabilitado
            
            // Generar vacaciones autom치ticas
            int vacationsAssigned = vacationService.assignVacationsForYear(year);
            
            String result = "Procesamiento completado para el a침o " + year + ":\n" +
                    "- Festivos nacionales importados: " + holidaysImported + " (游뛂 Calendarific deshabilitado)\n" +
                    "- Empleados con vacaciones asignadas: " + vacationsAssigned + "\n" +
                    "游눠 Los festivos pueden a침adirse manualmente desde la interfaz de administraci칩n";
            
            logger.info(result);
            return result;
        } catch (Exception e) {
            String errorMsg = "Error durante el procesamiento para el a침o " + year + ": " + e.getMessage();
            logger.error(errorMsg, e);
            return errorMsg;
        }
    }
} 